<!-- 1 -->
<link title="timeline-styles" rel="stylesheet" 
      href="https://cdn.knightlab.com/libs/timeline3/latest/css/timeline.css">

<!-- 2 -->
<script src="https://cdn.knightlab.com/libs/timeline3/latest/js/timeline.js"></script>

<div id='timeline-embed' style="width: 100%; height: 600px"></div>

<!-- 3 -->
<script type="text/javascript">
    // The TL.Timeline constructor takes at least two arguments:
    // the id of the Timeline container (no '#'), and
    // the URL to your JSON data file or Google spreadsheet.
    // the id must refer to an element "above" this code,
    // and the element must have CSS styling to give it width and height
    // optionally, a third argument with configuration options can be passed.
    // See below for more about options.
    var obj = "timeline object template";
    
    var timeline = null;

    function render_timeline(obj) {
      if (timeline == null) {
        timeline = new TL.Timeline('timeline-embed', obj);
      } else {
        // zoom_level = timeline.zoom_level;
        current_id = timeline.current_id;
        timeline = new TL.Timeline('timeline-embed', obj);
        timeline.on("loaded", function() {
          // alert(zoom_level);
          // alert(current_id);
          // console.log(current_id);
          timeline.goToId(current_id);
          // timeline.setZoom(zoom_level);
        });
      }
    }

    // var timeline_obj = [];
    // var timeline = null;

    // function render_timeline(obj) {
    //   // the set of objects to be rendered
    //   var trip_events = [];
    //   var day_events = [];
    //   var activity_events = [];
    //   var levels = [[], [], []];

    //   for (var i = 0; i < obj.events.length; i++) {
    //     if (obj.events[i].group == 'trip') {
    //       levels[0].push(obj.events[i]);
    //     } else if (obj.events[i].group == 'day') {
    //       levels[1].push(obj.events[i]);
    //     } else {
    //       levels[2].push(obj.events[i]);
    //     }
    //   }

    //   if (timeline == null) {
    //     zoom_level = 4;
    //     if (levels[0].length > 0)
    //       current_id = levels[0][0];
    //     else if (levels[1].length > 0)
    //       current_id = levels[1][0];
    //     else if (levels[2].length > 0)
    //       current_id = levels[2][0];
    //   } else {
    //     zoom_level = timeline.zoom_level;
    //     current_id = timeline.current_id;
    //   }

    //   // decide whether we need a new timeline
    //   var new_timeline_obj = []

    //   if (zoom_level >= 0)
    //     new_timeline_obj = new_timeline_obj.concat(levels[0]);
    //   if (zoom_level >= 12)
    //     new_timeline_obj = new_timeline_obj.concat(levels[1]);
    //   if (zoom_level >= 16)
    //     new_timeline_obj = new_timeline_obj.concat(levels[2]);
      
    //   function sameList(prev, next) {
    //     if (prev == null || next == null || prev.length != next.length)
    //       return false;
    //     for (var i = 0; i < prev.length; i++)
    //       if (prev[i].unique_id != next[i].unique_id)
    //         return false;
    //     return true;
    //   }

    //   if (!sameList(new_timeline_obj, timeline_obj)) {
    //     timeline = new TL.Timeline('timeline-embed', {'events': new_timeline_obj});
    //     timeline.setZoom(zoom_level);
    //     timeline.goToId(current_id);

    //     timeline_obj = new_timeline_obj;
    //     timeline.on("zoom_in", function(data) {
    //       timeline.zoom_level = data.zoom_level;
    //       timeline.current_id = data.target.current_id;
    //       render_timeline(obj)
    //     });
    //   }
    // }
    
</script>

<style>
  .tooltip {
    position: relative;
    display: inline-block;
    border-bottom: 1px dotted black;
  }
  
  .tooltip .tooltiptext {
    visibility: hidden;
    width: 240px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;
    
    /* Position the tooltip */
    position: absolute;
    z-index: 1;
    top: -5px;
    left: 105%;
  }
  
  .tooltip:hover .tooltiptext {
    visibility: visible;
  }

</style>


<style>
.filterDiv {
  float: left;
  background-color: #2196F3;
  color: #ffffff;
  width: 100px;
  line-height: 100px;
  text-align: center;
  margin: 2px;
  display: none;
}

.show {
  display: block;
}

.container {
  margin-top: 20px;
  overflow: hidden;
}

/* Style the buttons */
.btn {
  border: none;
  outline: none;
  padding: 12px 16px;
  background-color: #f1f1f1;
  cursor: pointer;
  margin-left: 3px;
  margin-bottom: 5px;
}

.btn:hover {
  background-color: #ddd;
}

.btn.active {
  background-color: #666;
  color: white;
}
</style>
<body>

<div id="myBtnContainer">
  <button class="btn active" onclick="filterSelection('all')"> Show all </button>
  <button class="btn" onclick="filterSelection('activity')"> Activities </button>
  <button class="btn" onclick="filterSelection('trip')"> Trips </button>
  <button class="btn" onclick="filterSelection('day')"> Days </button>
  <button class="btn" onclick="filterSelection('LLEntry')"> LLEntries </button>
</div>

<div id="TagsContainer">
  <button class="btn active" onclick="tagSelection('all')">Show all</button>
</div>

<div id="NextTagsContainer">
  <button class="btn active" onclick="nextTagSelection('all')">Show all</button>
</div>


<script>
var current_type = "all";
var current_tag = "all";
var current_next_tag = "all";


updateTimeline(current_type, current_tag, current_next_tag);

function filterSelection(type) {
  if (type != current_type) {
    current_type = type;
    updateTimeline(current_type, current_tag, current_next_tag);
  }
}

function tagSelection(tag) {
  if (tag != current_tag) {
    current_tag = tag;
    updateTimeline(current_type, current_tag, current_next_tag);
  }
}

function nextTagSelection(next_tag) {
  if (next_tag != current_next_tag) {
    current_next_tag = next_tag;
    updateTimeline(current_type, current_tag, current_next_tag);
  }

}

function most_frequent(arr, k) {
  var unique = Array.from(new Set(arr));
  unique.sort((a,b) =>
         - arr.filter(v => v == a).length
         + arr.filter(v => v == b).length
    );
  return unique.slice(0, k);
}

function updateTimeline(type, tag, next_tag) {
  var new_obj = {"events": []}
  var new_tags = []
  var new_next_tags = []

  for (var i = 0; i < obj.events.length; i++) {
    if ((type == "all" || obj.events[i].group == type) &&
        (tag == "all" || obj.events[i].tags.includes(tag)) &&
        (next_tag == "all" || obj.events[i].next_tags.includes(next_tag))) {
      new_obj.events.push(obj.events[i])
      new_tags = new_tags.concat(obj.events[i].tags);
      new_next_tags = new_next_tags.concat(obj.events[i].next_tags);
      // if (timeline.getDataById(obj.events[i].unique_id) == null)
      //   timeline.add(obj.events[i]);
    }
    //  else {
    //   timeline.removeId(obj.events[i].unique_id);
    // }
  }
  // timeline = new TL.Timeline('timeline-embed', new_obj);
  render_timeline(new_obj);
  // render_timeline(new_obj);

  new_tags = most_frequent(new_tags, 15);// Array.from(new Set(new_tags));
  new_next_tags = most_frequent(new_next_tags, 15);

  // tag_container = document.getElementById("TagsContainer");

  // update tags
  var containers = ["TagsContainer", "NextTagsContainer"];
  var functionNames = ["tagSelection", "nextTagSelection"];
  var tag_lists = [new_tags, new_next_tags];
  var targeted_tag = [tag, next_tag]

  for (var cid = 0; cid < containers.length; cid++) {
    var btnContainer = document.getElementById(containers[cid]);
    if (targeted_tag[cid] == "all") {
      btnContainer.innerHTML = '<button class="btn active" onclick="' + functionNames[cid] + '(\'all\')">Show all</button>';
    } else {
      btnContainer.innerHTML = '<button class="btn" onclick="' + functionNames[cid] + '(\'all\')">Show all</button>';
    }
    var new_tags = tag_lists[cid];
    for (var i = 0; i < new_tags.length; i++) {
      if (new_tags[i] == targeted_tag[cid]) {
        btnContainer.innerHTML += '<button class="btn active" onclick="' + functionNames[cid] + '(\'' + new_tags[i] + 
      '\')">' + new_tags[i] + '</button>';
      } else {
        btnContainer.innerHTML += '<button class="btn" onclick="' + functionNames[cid] + '(\'' + new_tags[i] + 
      '\')">' + new_tags[i] + '</button>';
      }
    }
  }
}


// Add active class to the current button (highlight it)
var containers = ["myBtnContainer", "TagsContainer", "NextTagsContainer"]

for (var cid = 0; cid < containers.length; cid++) {
  var btnContainer = document.getElementById(containers[cid]);
  var btns = btnContainer.getElementsByClassName("btn");
  for (var i = 0; i < btns.length; i++) {
    btns[i].addEventListener("click", function(){
      var current = document.getElementsByClassName("active");
      current[0].className = current[0].className.replace(" active", "");
      this.className += " active";
    });
  }
}
// render_timeline(obj);


</script>

